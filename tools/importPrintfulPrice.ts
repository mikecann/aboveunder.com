import * as csvtojson from "csvtojson";
import { IPrintOption } from '../src/lib/types';
import * as fs from "fs";
import { getMyRoundedPrice } from "../src/lib/utils";

interface ICSVRow
{
    Product: string;
    Width: string;
    Height: string;
    Weight: string;
    "Printful Price": string;
    "My Price": string;
    "Printful Shipping": string;
    Ratio: string;
    Area: string;  
}

interface IProdMappings {
    [details: string] : { id:string, name:string };
} 

const prodMapping : IProdMappings = {
    "Poster": { id:"photo-paper-poster", name:"Photo Paper Poster" },
    "Canvas": { id:"canvas", name:"Canvas" },
    "Frame": { id:"photo-paper-framed", name:"Photo Paper Framed" },
};

interface IOptions
{
    [details: string] : IPrintOption;
}

async function run() 
{
    const csvPath = `${__dirname}/../../data/Above Under Pricing - Printful Pricing.csv`;
    const tsPath = `${__dirname}/../../src/lib/printfulPrintOptions.ts`;

    var options : IOptions = {};

    console.log(`Importing CSV from: ${csvPath}`);
    csvtojson()
        .fromFile(csvPath)
        .on('json', (json:ICSVRow) => {

            if (!json.Product)
                return;

            var mapping = prodMapping[json.Product];
            if (mapping==null)
                throw Error("No mapping found for: "+json.Product)

            if (!options.hasOwnProperty(mapping.id))
            {
                options[mapping.id] = {
                    id: prodMapping[json.Product].id,
                    name: prodMapping[json.Product].name,
                    sizes: []
                }
            }
            else
            {
                options[mapping.id].sizes.push({
                    id: `${json.Width}x${json.Height}`,
                    widthInches: parseInt(json.Width),
                    heightInches: parseInt(json.Height),
                    priceAUD: getMyRoundedPrice(parseFloat(json["My Price"])),
                    weight: parseFloat(json.Weight) * 1000, // from kg to g
                })
            }
        })
        .on('done', async (error:any)=>{
            
            if (error)
                throw new Error(error);

            var outp = [];
            for(var key in options)
                outp.push(options[key]);

            fs.writeFileSync(tsPath, `// WARNING: This file has been generated by a tool!

import { IPrintOption } from "./types";
            
export const data : IPrintOption[] = ${JSON.stringify(outp, null, 2)};`)

        });
}

run();